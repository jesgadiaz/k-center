import random
import datetime
import timeit
import math
import heapq

################### FUNCTIONS ##############################################################

# Get the cardinality of every vertex using best_known_size for the pruning
def cardinality():
    global card
    card = []
    for i in range(0,n):
        card.append(0)
    for i in range(0,n):
        for j in range(0,n):
            if matrix[i][j] < best_known_size:
                card[i] += 1


# Get the cardinality of every vertex using an input size for the pruning
def cardinality_size(size):
    global card
    card = []
    for i in range(0,n):
        card.append(0)
    for i in range(0,n):
        for j in range(0,n):
            if matrix[i][j] <= size:
                card[i] += 1

# Update Cardinality (i.e. do not take into account the previously dominated vertices)
def update_cardinality(centers, max_index, s):
    global dominated
    global card
    recently_dominated = []
    for i in range(0,n):
        recently_dominated.append(False)
    for i in range(0,n):
        if not dominated[i]:
            for j in range(0,max_index):
                if matrix[i][centers[j]] <= s:
                    dominated[i] = True
                    recently_dominated[i] = True
    for i in range(0,n):
        if recently_dominated[i]:
            for j in range(0,n):
                if matrix[j][i] <= s:
                    card[j] -= 1

# Update Distance. Get the distance from every vertex to its nearest center in the partial solution
def update_distance(centers, max_index):
    global distance
    for i in range(0, n):
        if matrix[i][centers[max_index]] < distance[i]:
            distance[i] = matrix[i][centers[max_index]]

# Get the farthest node
def farthest_node():
    max_dist = 0
    max_dist_node = 0
    global distance
    for i in range(0,n):
        if distance[i] > max_dist:
            max_dist = distance[i]
            max_dist_node = i
    return max_dist_node

# Get the set of critical neighbors
def get_critical_neighbors(node, s):
    l = []
    for i in range(0, n):
        if matrix[i][node] <= s:
            l.append(i)
    return l

# Get the maximum cardinality vertex
def max_cardinality(l):
    max_card = 0
    max_card_node = 0
    global card
    for i in l:
        if card[i] > max_card:
            max_card = card[i]
            max_card_node = i
    return max_card_node

# Get the solution size of the currently constructed solution
def solution_size():
    max_dist = 0
    global distance
    for i in range(0,n):
        if distance[i] > max_dist:
            max_dist = distance[i]
    return max_dist

# Critical Dominating Set heuristic
def dominating_set(s):
    C = []
    global card
    global dominated
    global distance
    global prob
    dominated = []
    distance = []
    for i in range(0,n):
        dominated.append(False)
        distance.append(float("inf"))
    critical_neighbors = get_critical_neighbors(random.randint(0, n-1), s)
    if random.random() <= prob:
        C.append(max_cardinality(critical_neighbors))
    else:
        C.append(random.randint(0,n-1))
    update_distance(C, 0)
    for i in range(1, k):
        update_cardinality(C, i, s)
        critical_neighbors = get_critical_neighbors(farthest_node(), s)
        if random.random() <= prob:
            C.append(max_cardinality(critical_neighbors))
        else:
            C.append(critical_neighbors[random.randint(0,len(critical_neighbors)-1)])
        update_distance(C, i)
    size = solution_size()
    out = [size, C]
    return out



# This function generates a 2-approximated solution with the Gon algorithm
def gon():
    C = []
    global distance
    distance = []
    for i in range(0,n):
        distance.append(float("inf"))
    f = random.randint(0, n-1)
    C.append(f)
    update_distance(C, 0)
    for i in range(1, k):
        f = farthest_node()
        C.append(f)
        update_distance(C, i)
    size = solution_size()
    out = [size, C]
    return out



# Get the critical (farthest) node
def criticalNode(C):
    max_dist = 0
    farthest_node = 0
    for i in range(0, n):
        min_dist = float("inf")
        for j in range(0, k):
            if matrix[i][C[j]] <= min_dist:
                min_dist = matrix[i][C[j]]
        if min_dist > max_dist:
            max_dist = min_dist
            farthest_node = i
    return farthest_node

# Make the boolean version of the input solution
def getCurrentBoolean(in_sol):
    l = []
    for i in range(0, n):
        l.append(False)
    for i in range(0, len(in_sol)):
        l[in_sol[i]] = True
    return l

# Get First and Second closest centers
def firstAndSecond(in_sol):
    global F0
    global F1
    global D0
    global D1
    global M
    F0 = []
    F1 = []
    D0 = []
    D1 = []
    M = []
    for i in range(0, n):
        F0.append(0)
        F1.append(0)
        D0.append(0)
        D1.append(0)
        M.append(0)
    for i in range(0, n):
        min_dist = float("inf")
        for j in range(0, k):
            if matrix[i][in_sol[j]] < min_dist:
                min_dist = matrix[i][in_sol[j]]
                F0[i] = in_sol[j]
                D0[i] = min_dist
        min_dist = float("inf")
        for j in range(0, k):
            if matrix[i][in_sol[j]] < min_dist and in_sol[j] != F0[i]:
                min_dist = matrix[i][in_sol[j]]
                F1[i] = in_sol[j]
                D1[i] = min_dist

# Add facility to current solution
def addFacility(f):
    global F0
    global F1
    global D0
    global D1
    Sc = 0
    for i in range(0, n):
        if matrix[i][f] < D0[i]:
            D1[i] = D0[i]
            F1[i] = F0[i]
            D0[i] = matrix[i][f]
            F0[i] = f
        elif matrix[i][f] < D1[i]:
            D1[i] = matrix[i][f]
            F1[i] = f
        if D0[i] > Sc:
            Sc = D0[i]
    return Sc

# Remove facility to current solution
def removeFacility(f, current_sol):
    global F0
    global F1
    global D0
    global D1
    Sc = 0
    for i in range(0, n):
        if F0[i] == f:
            D0[i] = D1[i]
            F0[i] = F1[i]
            findNext(i, current_sol)
        elif F1[i] == f:
            findNext(i, current_sol)
        if D0[i] > Sc:
            Sc = D0[i]
    return Sc

# Find Next function
def findNext(f, current_sol):
    min_dist = float("inf")
    global D1
    global F1
    for i in range(0, k):
        if current_sol[i] != F0[f]:
            if matrix[current_sol[i]][f] < min_dist:
                F1[f] = current_sol[i]
                min_dist = matrix[current_sol[i]][f]
                D1[f] = min_dist

# Clean M array
def cleanMarray():
    global M
    M = []
    for i in range(0, n):
        M.append(0)


# Critical Interchange heuristic
def interchange(in_sol, bks, current_size):
    cardinality()
    current_sol = []
    global F0
    global F1
    global D0
    global D1
    global M
    global card
    global best_known_size
    best_size = current_size
    tabu_list = []
    list = []
    for i in range(0, n):
        list.append(False)
    for i in range(0, n):
        tabu_list.append(list)
    for i in range(0, k):
        current_sol.append(in_sol[i])
    while current_size < best_size:
        L = []
        # The critical node is also the farthest node
        current_sol_boolean = getCurrentBoolean(current_sol)
        firstAndSecond(current_sol)
        C = float("inf")
        for j in range(0, n):
            Sc = addFacility(j)
            if j > 0:
                current_sol_boolean[j-1] = False # Erase the previous added facility
            current_sol_boolean[j] = True # Check with true the new added facility
            cleanMarray()
            for m in range(0, n):
                if card[m] > 1:
                    if matrix[j][m] <= D1[m]:
                        if matrix[j][m] > M[F0[m]]:
                            M[F0[m]] = matrix[j][m]
                    elif D1[m] > M[F0[m]]:
                        M[F0[m]] = D1[m]
                    if Sc > M[F0[m]]:
                        M[F0[m]] = Sc
                else:
                    M[F0[m]] = float("inf")
            for m in range(0, k):
                if M[current_sol[m]] == 0:
                    M[current_sol[m]] = current_size
                if not tabu_list[current_sol[m]][j] or \
                        not tabu_list[j][current_sol[m]] or M[current_sol[m]] < best_size:
                    if M[current_sol[m]] == C:
                        L.append([current_sol[m], j])
                    elif M[current_sol[m]] < C:
                        L.clear()
                        L.append([current_sol[m], j])
                        C = M[current_sol[m]]
            Sc = removeFacility(j, current_sol)
        if len(L) == 0:
            tabu_list = []
            list = []
            for i in range(0, n):
                list.append(False)
            for i in range(0, n):
                tabu_list.append(list)
        else:
            selection = L[random.randint(0, len(L)-1)]
            tabu_list[selection[0]][selection[1]] = True
            tabu_list[selection[1]][selection[0]] = True
            for j in range(0, k):
                if current_sol[j] == selection[0]:
                    current_sol[j] = selection[1]
            current_size = C
        if current_size < best_size:
            best_size = current_size
        if best_size < best_known_size:
            best_known_size = best_size
            #print(best_known_size)
            cardinality()
        if best_known_size <= target[v-1]:
            break
    return best_known_size


    # Critical Interchange heuristic
def critical_interchange(in_sol, bks, current_size):
    cardinality()
    rep = 2*n
    current_sol = []
    global F0
    global F1
    global D0
    global D1
    global M
    global card
    global best_known_size
    best_size = current_size
    tabu_list = []
    list = []
    for i in range(0, n):
        list.append(False)
    for i in range(0, n):
        tabu_list.append(list)
    for i in range(0, k):
        current_sol.append(in_sol[i])
    for i in range(0, rep):
        L = []
        # The critical node is also the farthest node
        current_sol_boolean = getCurrentBoolean(current_sol)
        critical_neighbors = get_critical_neighbors(criticalNode(current_sol), bks)
        firstAndSecond(current_sol)
        C = float("inf")
        for j in range(0, len(critical_neighbors)):
            Sc = addFacility(critical_neighbors[j])
            if j > 0:
                current_sol_boolean[critical_neighbors[j-1]] = False # Erase the previous added facility
            current_sol_boolean[critical_neighbors[j]] = True # Check with true the new added facility
            cleanMarray()
            for m in range(0, n):
                if card[m] > 1:
                    if matrix[critical_neighbors[j]][m] <= D1[m]:
                        if matrix[critical_neighbors[j]][m] > M[F0[m]]:
                            M[F0[m]] = matrix[critical_neighbors[j]][m]
                    elif D1[m] > M[F0[m]]:
                        M[F0[m]] = D1[m]
                    if Sc > M[F0[m]]:
                        M[F0[m]] = Sc
                else:
                    M[F0[m]] = float("inf")
            for m in range(0, k):
                if M[current_sol[m]] == 0:
                    M[current_sol[m]] = current_size
                if not tabu_list[current_sol[m]][critical_neighbors[j]] or \
                        not tabu_list[critical_neighbors[j]][current_sol[m]] or M[current_sol[m]] < best_size:
                    if M[current_sol[m]] == C:
                        L.append([current_sol[m], critical_neighbors[j]])
                    elif M[current_sol[m]] < C:
                        L.clear()
                        L.append([current_sol[m], critical_neighbors[j]])
                        C = M[current_sol[m]]
            Sc = removeFacility(critical_neighbors[j], current_sol)
        if len(L) == 0:
            tabu_list = []
            list = []
            for i in range(0, n):
                list.append(False)
            for i in range(0, n):
                tabu_list.append(list)
        else:
            selection = L[random.randint(0, len(L)-1)]
            tabu_list[selection[0]][selection[1]] = True
            tabu_list[selection[1]][selection[0]] = True
            for j in range(0, k):
                if current_sol[j] == selection[0]:
                    current_sol[j] = selection[1]
            current_size = C
        if current_size < best_size:
            best_size = current_size
        if best_size < best_known_size:
            best_known_size = best_size
            #print(best_known_size)
            cardinality()
        if best_known_size <= target[v-1]:
            break
    return best_known_size

    # Get First closest centers
def assignedCenter(in_sol):
    global F0
    F0 = []
    for i in range(0, n):
        F0.append(0)
        D0.append(0)
    for i in range(0, n):
        min_dist = float("inf")
        for j in range(0, k):
            if matrix[i][in_sol[j]] < min_dist:
                min_dist = matrix[i][in_sol[j]]
                F0[i] = in_sol[j]
                D0[i] = min_dist
        min_dist = float("inf")

# fix_dominating_set function
def fix_dominating_set(in_sol, bks, current_size):
    print("Start local search")
    rep = 10
    current_sol = []
    global F0
    global D0
    global card
    global distance
    global best_known_size
    distance_centers = []
    for i in range(0, n):
        distance_centers.append(float("inf"))
    for i in range(0,n):
        dominated.append(False)
        distance.append(float("inf"))
    best_size = current_size
    for i in range(0, k):
        current_sol.append(in_sol[i])

    for w in range(0, rep):
        cardinality()
        current_sol_boolean = getCurrentBoolean(current_sol)
        new_sol = []
        new_sol_boolean = getCurrentBoolean(new_sol)
        assignedCenter(current_sol)

        # Get the first center
        farthest_node = criticalNode(current_sol)
        nearest_center = F0[farthest_node]
        list = []
        for i in range(0, n):
            if matrix[i][nearest_center] < best_known_size and matrix[i][farthest_node] < best_known_size:
                list.append(i)
        max_card = 0
        max_card_element = 0
        for i in range(0, len(list)):
            if card[list[i]] > max_card:
                max_card = card[list[i]]
                max_card_element = list[i]
        if random.random() < 1:
            new_sol.append(max_card_element)
            new_sol_boolean[max_card_element] = True
        else:
            r = random.randint(0, len(list)-1)
            new_sol.append(list[r])
            new_sol_boolean[list[r]] = True
        current_sol_boolean[nearest_center] = False
        for i in range(0, k):
            if current_sol_boolean[current_sol[i]]:
                if matrix[current_sol[i]][max_card_element] < distance_centers[current_sol[i]]:
                    distance_centers[current_sol[i]] = matrix[current_sol[i]][max_card_element]

        # Restart the distance from every node to the new partial solution
        distance = []
        for i in range(0, n):
            distance.append(float("inf"))
        for i in range(0, n):
            if matrix[i][new_sol[0]] < distance[i]:
                distance[i] = matrix[i][new_sol[0]]

        # Get the next centers
        for i in range(1, k):
            update_cardinality(new_sol, i)
            nearest_center = 0
            min_dist = float("inf")
            list = []
            for j in range(0, k):
                if current_sol_boolean[current_sol[j]]:
                    if distance_centers[current_sol[j]] < min_dist:
                        min_dist = distance_centers[current_sol[j]]
                        nearest_center = current_sol[i]
            for j in range(0, n):
                if matrix[j][nearest_center] < best_known_size:
                    list.append(j)
            max_card = 0
            max_card_element = 0
            for j in range(0, len(list)):
                if card[list[j]] > max_card:
                    max_card = card[list[j]]
                    max_card_element = list[j]
            if random.random() < 1:
                new_sol.append(max_card_element)
                new_sol_boolean[max_card_element] = True
            else:
                r = random.randint(0, len(list)-1)
                new_sol.append(list[r])
                new_sol_boolean[list[r]] = True
            current_sol_boolean[nearest_center] = False
            #update_distance(new_sol, i)
            for j in range(0, n):
                if matrix[j][new_sol[i]] < distance[j]:
                    distance[j] = matrix[j][new_sol[i]]

        current_size = solution_size()

        for j in range(0, k):
            current_sol[j] = new_sol[j]

        if current_size < best_size:
            best_size = current_size
        if best_size < best_known_size:
            best_known_size = best_size
            cardinality()
        if best_known_size <= target[v-1]:
            break
        print(repr(current_size))
    print("End of local search")
    return best_known_size


# Orders the set of edges' cost
def heap_sort(items):
    """ Implementation of heap sort """
    heapq.heapify(items)
    items[:] = [heapq.heappop(items) for i in range(len(items))]
    return items

# Check if a 2-approximated solution is a dominating set in G^2
def gonDomSqrGraph(s):
    checked = []
    dom = []
    for i in range(0, n):
        checked.append(False)
        dom.append(False)
    dom_cnt = 0
    for i in gon_sol:
        for j in range(0, n):
            if not checked[j]:
                if matrix[i][j] <= s:
                    for q in range(0, n):
                        if matrix[j][q] <= s:
                            dom[q] = True
                checked[j] = True
    for i in range(0, n):
        if dom[i]:
            dom_cnt = dom_cnt + 1
    if dom_cnt == n:
        return True
    else:
        return False


# Check if a 2-approximated solution is a dominating set in G_2W
def gonDom2W(s):
    checked = []
    dom_cnt = 0
    for i in range(0, n):
        checked.append(False)
    for i in range(0, n):
        if not checked:
            for j in gon_sol:
                if matrix[i][j] <= 2*s:
                    checked[i] = True
                    dom_cnt = dom_cnt + 1
    if dom_cnt == n:
        return True
    else:
        return False



################################ BEGINNING OF THE CODE ################################################################

# We text the algorithm over the set of 40 instances pmed from OR-Lib
for v in range(1, 41):
    # The path of every instance is placed here (pmed1, pmed2,..., pmed40)
    f = open('/home/jgd/ORLib/pmed' + repr(v) + '.txt', 'r')
    # These target values are the optimal solutions' size
    target = [127, 98, 93, 74, 48, 84, 64, 55, 37, 20, 59, 51, 35, 26, 18, 47, 39, 28, 18, 13, 40, 38, 22, 15, 11, 38,
              32, 18, 13, 9, 30, 29, 15, 11, 30, 27, 15, 29, 23, 13]
    #target = [127, 98, 93, 74, 48, 84, 64, 55, 37, 20, 59, 51, 36, 26, 18, 47, 39, 29, 19, 14, 40, 38, 23, 15, 11, 38,
    #          32, 19, 13, 10, 30, 30, 16, 11, 30, 28, 16, 29, 24, 14]



    # Setting up the instance (BEGIN)***************************************************************
    # Get the values of n, m and k
    str = f.readline()
    str = str.split()
    n = int(str[0])
    m = int(str[1])
    k = int(str[2])
    # Fill the Adjacencies Matrix
    matrix = []
    for i in range(0,n):
        list = []
        for j in range(0,n):
            list.append(float("inf"))
        matrix.append(list)
    for i in range(0, m):
        str = f.readline()
        str = str.split()
        v1 = int(str[0]) - 1
        v2 = int(str[1]) - 1
        weight = float(str[2])
        matrix[v1][v2] = weight
        matrix[v2][v1] = weight
    # Apply the Floyd-Marshal algorithm
    for i in range(0, n):
        matrix[i][i] = 0
    for i in range(0, n):
        for j in range(0, n):
            for l in range(0, n):
                if matrix[i][j] == float("inf") or matrix[i][l] == float("inf"):
                    cost = float("inf")
                else:
                    cost = matrix[i][j] + matrix[i][l]
                if cost < matrix[j][l]:
                    matrix[j][l] = cost
    f.close()
    # Setting up the instance (END)***************************************************************



    # Order the set of possible solutions' size
    ordered_sizes = []
    for i in range(0, n):
        for j in range(i, n):
            ordered_sizes.append(matrix[i][j])
    ordered_sizes = heap_sort(ordered_sizes)


    # The algorithm can be executed over every instance any number of times with a different seed
    #print("*************************************************************************************************")
    #print("100 executions of pmed" + repr(v) + ": ")
    for h in range(0, 1):
        prob = 1
        max_iterations = n
        best_known_size = float("inf")
        card = []
        dominated = []
        distance = []
        random.seed(h)
        # These variables are used by the Local Search method "Critical Interchange"
        F0 = []
        F1 = []
        D0 = []
        D1 = []
        M = []
        ds_time = 0
        ls_time = 0
        # A 2-approximated Gon solution is generated for evaluation
        list = gon()
        best_known_size = list[0]
        C = list[1]
        gon_sol = list[1]

        # Initializing the binary search
        upper = len(ordered_sizes) - 1
        lower = 0
        mid = math.floor(lower + ((upper - lower)/2))
        not_done = True
        while not_done:
            # Computing the mid value
            mid = math.floor(lower + ((upper - lower)/2))
            mid_value = ordered_sizes[int(mid)]
            upper_value = ordered_sizes[int(upper)]
            lower_value = ordered_sizes[int(lower)]
            # Computing the cardinality of every vertex over the pruned input graph
            cardinality_size(mid_value)
            init_ds_time = timeit.default_timer()
            # Executing the Critical Dominating Set algorithm
            ds = dominating_set(ordered_sizes[int(mid)])
            ds_time = ds_time + (timeit.default_timer() - init_ds_time)
            size = ds[0]
            # If the new solution is better than the previous best one, substitute them
            if size <= best_known_size:
                C = ds[1]
            if size <= best_known_size:
                best_known_size = size
            # If the algorithm has already found the target, the algorithm has finished
            if best_known_size <= target[v-1]:
                break
            # This condition is met when the binary search finishes
            if lower == mid and upper == lower + 1:
                not_done = False

            # Determine where to move on the binary search
            if best_known_size <= mid_value:
                upper = mid
            else:
                if not gonDom2W(mid_value):
                    lower = mid
                else:
                    upper = mid
        #Print the best size found
        #print(best_known_size)

        # Here starts the Structure-drven Randomization
        max_iterations = 99999999999999999999999999999999999999999
        prob = 1 / (n ** (1/k))
        for i in range(0, max_iterations):
            cardinality()
            init_ds_time = timeit.default_timer()
            epsilon = 1e-20
            ds = dominating_set(best_known_size - epsilon)
            ds_time = ds_time + (timeit.default_timer() - init_ds_time)
            size = ds[0]
            C = ds[1]
            if size < best_known_size:
                best_known_size = size
            else:
                init_ls_time = timeit.default_timer()
                # If we are going to allow a Local Search phase, the next line is performed,
                # otherwise it can be commented
                best_known_size = critical_interchange(C, best_known_size, size)
                ls_time = ls_time + (timeit.default_timer() - init_ls_time)
            if best_known_size <= target[v-1]:
                break

        # Here we are printing the execution time until reaching the target
        print( repr(ds_time + ls_time))
